#!/usr/bin/env bash

# =============================================================================
# NixOS Flake-Based Host Installer
#
# This script automates the installation of a new NixOS host from a flake-based
# configuration. It handles temporary secret creation for the initial user
# password and uses a wrapper to avoid modifying the git-tracked configuration.
#
# USAGE:
# 1. Boot NixOS installer on the new machine.
# 2. Partition and mount drives (e.g., mount root to /mnt).
# 3. Clone your config repo (e.g., git clone <url> ~/nixos-config).
# 4. Run: sudo ~/nixos-config/scripts/install-new-host.sh <hostname>
#
# Example: sudo ./scripts/install-new-host.sh asus-laptop
# =============================================================================

# Stop immediately if any command fails
set -e

# --- Configuration ---
# Get the absolute path to the root of the nixos-config repository
CONFIG_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." >/dev/null 2>&1 && pwd )"
# Temporary location for the installation secrets
SECRET_FILE="/tmp/secret-password"
# Temporary wrapper file for the installation
INSTALL_WRAPPER="/tmp/install-config.nix"


# --- Pre-flight Checks ---
echo "--- Running Pre-flight Checks ---"

# 1. Check if running as root
if [[ "$EUID" -ne 0 ]]; then
  echo "‚ùå Error: This script must be run as root. Please use sudo."
  exit 1
fi

# 2. Check for a hostname argument
if [[ -z "$1" ]]; then
  echo "‚ùå Error: No hostname specified."
  echo "   Usage: $0 <hostname>"
  echo "   Example: $0 asus-laptop"
  exit 1
fi
HOST_NAME="$1"

# 3. Check if partitions are mounted at /mnt
if ! mountpoint -q /mnt; then
  echo "‚ùå Error: The root partition is not mounted at /mnt."
  echo "   Please partition your disks and mount them before running this script."
  exit 1
fi

# 4. Check if the specified host configuration exists
if [[ ! -f "$CONFIG_ROOT/hosts/$HOST_NAME/default.nix" ]]; then
    echo "‚ùå Error: Host configuration not found at hosts/$HOST_NAME/default.nix"
    exit 1
fi

echo "‚úÖ Pre-flight checks passed."
echo "---------------------------------"

# --- Generate Hardware Configuration ---
echo "--- Generating Hardware Configuration ---"

HARDWARE_CONFIG_PATH="$CONFIG_ROOT/hosts/$HOST_NAME/hardware-configuration.nix"

if [[ -f "$HARDWARE_CONFIG_PATH" ]]; then
    read -p "‚ö†Ô∏è A hardware configuration already exists. Overwrite it? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Skipping hardware generation."
    else
        nixos-generate-config --root /mnt
        mv /mnt/etc/nixos/hardware-configuration.nix "$HARDWARE_CONFIG_PATH"
        # Clean up the unused default configuration.nix
        rm /mnt/etc/nixos/configuration.nix
        echo "‚úÖ Hardware configuration generated and moved to hosts/$HOST_NAME/."
    fi
else
    nixos-generate-config --root /mnt
    mv /mnt/e/nixos/hardware-configuration.nix "$HARDWARE_CONFIG_PATH"
    rm /mnt/etc/nixos/configuration.nix
    echo "‚úÖ Hardware configuration generated and moved to hosts/$HOST_NAME/."
fi
echo "---------------------------------------"

# --- Gather Information ---
echo "--- Gathering User Information ---"

# Prompt for a secure password for the user defined in the host config
echo "üîë Please choose an initial password for the user being created on '$HOST_NAME'."
read -s -p "   Enter password: " password
echo
read -s -p "Confirm password: " password_confirm
echo
if [[ "$password" != "$password_confirm" ]]; then
    echo "‚ùå Error: Passwords do not match. Please try again."
    exit 1
fi
echo "$password" > "$SECRET_FILE"
echo "‚úÖ Secret password file created at $SECRET_FILE."
echo "----------------------------------"


# --- Prepare the Installation ---
echo "--- Preparing Installation ---"

# Create a temporary wrapper configuration file.
# This imports the real host config and adds our temporary, secret values.
echo "Creating temporary installation wrapper at $INSTALL_WRAPPER..."
cat > "$INSTALL_WRAPPER" <<EOF
# DO NOT EDIT - This file is generated by install-new-host.sh
{ ... }: {
  imports = [
    # Import the actual configuration for the host
    "$CONFIG_ROOT/hosts/$HOST_NAME/default.nix"
  ];

  # Override with settings for the initial installation.
  # These values are applied on top of the host's configuration
  # but are not committed to the repository.
  customConfig.user = {
    isNewHost = true;
    initialPasswordFile = "$SECRET_FILE";
  };
}
EOF
echo "‚úÖ Wrapper created."
echo "----------------------------"


# --- Execute Installation ---
echo "üöÄ Starting NixOS installation for host: $HOST_NAME..."

# The --apply-arg-file flag is the key to the wrapper method.
# It injects our temporary file into the module evaluation.
nixos-install --no-root-passwd --flake "$CONFIG_ROOT#$HOST_NAME" --impure --apply-arg-file imports "$INSTALL_WRAPPER"


# --- Cleanup ---
echo "--- Cleaning Up ---"
rm -f "$SECRET_FILE"
rm -f "$INSTALL_WRAPPER"
echo "‚úÖ Temporary files removed."
echo "---------------------"

echo "‚úÖ Installation complete!"
echo "You can now reboot the system."
echo ""
echo "üî¥ IMPORTANT POST-BOOT STEPS:"
echo "1. Log in as the new user."
echo "2. Move the configuration to your home directory: sudo mv /etc/nixos ~/nixos-config"
echo "3. Change its ownership: sudo chown -R \$(whoami):\$(whoami) ~/nixos-config"