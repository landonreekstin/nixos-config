# ~/nixos-config/hosts/optiplex-nas/default.nix
{ inputs, pkgs, lib, config, ... }:

{
  imports = [
    # This will be generated by your install script.
    ./hardware-configuration.nix
    
    # Top level nixos modules import.
    ../../modules/nixos/default.nix

    # Host specific disk configuration
    ./disko-config.nix
  ];

  # 1. Tell the boot process to include Btrfs support
  boot.initrd.supportedFilesystems = [ "btrfs" ];

  # Define the mount options for the external HDD storage pool.
  fileSystems."/mnt/storage" = {
    # This device path comes from the partlabel we set in Disko.
    device = "/dev/disk/by-partlabel/disk-hdd1-storage";
    fsType = "btrfs";
    options = [
      # Standard options for BTRFS
      "noatime"
      "compress=zstd"
      # This is the crucial option:
      # It tells systemd not to halt the boot process if this device isn't ready.
      "nofail"
    ];
  };

  # 2. Create and enable a swap file on our dedicated swap subvolume
  swapDevices = [
    {
      device = "/swap/swapfile";
      size = 8 * 1024; # 8GB swap file, adjust as needed
    }
  ];

  # === Optiplex NAS Specific Values for `customConfig` ===
  customConfig = {
    
    user = {
      # This will be created during your installation.
      name = "lando"; # Or whatever user your script creates
      email = "landonreekstin@gmail.com";
      shell = pkgs.bash;
    };
    
    system = {
      hostName = "optiplex-nas";
      stateVersion = "25.05"; # Match your flake's version
      timeZone = "America/Chicago";
      locale = "en_US.UTF-8";
    };
    
    # This is a server, so we disable the desktop environment.
    desktop = {
      environment = "none";
      displayManager = {
        enable = false;
        type = "none";
      };
    };
    
    # Disable graphical programs
    programs = {
      hyprland.enable = false;
      kde.enable = false;
      cosmic.enable = false;
    };

    homeManager = {
      enable = true;
      themes = {
        # Themes are not applicable for a headless server
        kde = "none";
        hyprland = "none";
      };
    };

    packages = {
      nixos = with pkgs; [ 
        wget
        git
        vim
        htop
      ];
      homeManager = with pkgs; [ ];
    };

    apps = {
      defaultBrowser = "none";
    };

    profiles = {
      gaming.enable = false;
      development.fpga-ice40.enable = false;
      development.kernel.enable = false;
    };

    services = {
      ssh.enable = true;
      vscodeServer.enable = true;
      nixai.enable = false;
    };

    homelab = {
      samba.enable = false;
      jellyfin.enable = false;
    };
  };

  # Home Manager configuration for this Host
  home-manager = lib.mkIf config.customConfig.homeManager.enable {
    useGlobalPkgs = true;
    useUserPackages = true;
    backupFileExtension = "hm-backup";
    extraSpecialArgs = { inherit inputs; customConfig = config.customConfig; };
    users.${config.customConfig.user.name} = { pkgs', lib', config'', ... }: {
      imports = [
        ../../modules/home-manager/default.nix
      ];
    };
  };
  
}